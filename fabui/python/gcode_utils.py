import re
import subprocess as sub


''' READ FIRST / LAST N LINES TO DETERMINATE WICH ENGINE GENERATED THE FILE '''
def who_generate_file(file, max_lines = 50):
    ''' READ LAST MAX_LINES '''
    end_file = sub.Popen(['tail', file, '-n ' + str(max_lines)],stdout=sub.PIPE,stderr=sub.PIPE)
    output, errors = end_file.communicate()
    last_lines = output.splitlines()
    ''' READ FIRST MAX_LINES '''
    start_file = sub.Popen(['head', '-' + str(max_lines), file],stdout=sub.PIPE,stderr=sub.PIPE)
    output, errors = start_file.communicate()
    first_lines = output.splitlines()
    
    for line in last_lines:
       search_cura = re.search('CURA_PROFILE_STRING:', line);
       if search_cura != None:
           return "CURA"
       search_slic3r = re.search('generated by Slic3r', line);
       if search_slic3r != None:
           return "SLIC3R"
       
    for line in first_lines:
       search_slic3r = re.search('generated by Slic3r', line);
       if search_slic3r != None:
           return "SLIC3R"
       search_cura = re.search('CURA_PROFILE_STRING:', line);
       if search_cura != None:
           return "CURA"
    return "UNKNOWN"


''' RETURN ARRAY OVERRIDE DATA [COMMAND, VALUE, DESCRIPTION] '''
def override_data(override):
    
    override_splitted = override.split()
    
    command= override_splitted[0]
    value=override_splitted[1]
    value=value.replace("S", "");
        
    description="<span class='override-command'>"
    
    if command=="M104":
        description+= "Nozzle temperature set to "+value+" &deg;C"
    elif command== "M140":
        description+= "Bed temperature set to "+value+" &deg;C"
    elif command=="M220":
        description+="Speed factor override set to "+value+"%"
    elif command=="M106":
        temp = int((float(value) / 255) * 100)
        description+="Fan speed set to "+str(temp)+"%"
    elif command=="M107":
        description+="Fan turn off"
        fan=0
    elif command=="M221":
        description+="Extruder factor override set to "+ str(value)+'%'
    else:
        description+="description none"
    description+="</span>"
    
    return command, value, description

''' READ COMMAND FROM GCODE LINE '''
def get_command(line):
    return line.split(";")[0].rstrip()

def read_temperature_line(line):
    temps=line.split(" ")
    ext_temp=float(temps[1].split(":")[1])
    ext_temp_target=float(temps[2].split("/")[1])
    bed_temp=float(temps[3].split(":")[1])
    bed_temp_target=float(temps[4].split("/")[1])
    return ext_temp, ext_temp_target, bed_temp, bed_temp_target

def red_wait_temperature_line(line):    
    temps=line.split(" ")
    bed_temp = ''    
    ext_temp=float(temps[0].split(":")[1])
    
    if(temps[2].split(":")[0] == 'B'):
        bed_temp=float(temps[2].split(":")[1])
    return ext_temp, bed_temp

#def get_command_value(command, movement = False):
#    if(!movement):
#        match = re.search('(M\d+)\sS([+|-]*[0-9]*.[0-9]*)', command)
    
        