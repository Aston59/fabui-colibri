import os,sys,time
import serial
import re
import json
import ConfigParser
import logging
import argparse
from datetime import datetime
import subprocess as sub
import commands

''' READ FIRST / LAST N LINES TO DETERMINATE WICH ENGINE GENERATED THE FILE '''
def who_generate_file(gcode_file, max_lines = 50):
    ''' READ LAST MAX_LINES '''
    end_file = sub.Popen(['tail', gcode_file, '-n ' + str(max_lines)],stdout=sub.PIPE,stderr=sub.PIPE)
    output, errors = end_file.communicate()
    last_lines = output.splitlines()
    ''' READ FIRST MAX_LINES '''
    start_file = sub.Popen(['head', '-' + str(max_lines), gcode_file],stdout=sub.PIPE,stderr=sub.PIPE)
    output, errors = start_file.communicate()
    first_lines = output.splitlines()
    
    for line in last_lines:
       search_cura = re.search('CURA_PROFILE_STRING:', line);
       if search_cura != None:
           return "CURA"
       search_slic3r = re.search('generated by Slic3r', line);
       if search_slic3r != None:
           return "SLIC3R"
       
    for line in first_lines:
       search_slic3r = re.search('generated by Slic3r', line);
       if search_slic3r != None:
           return "SLIC3R"
       search_cura = re.search('CURA_PROFILE_STRING:', line);
       if search_cura != None:
           return "CURA"
    return "UNKNOWN"

def cura_get_total_layers(gcode_file, max_lines = 50):
    ''' READ FIRST MAX_LINES '''
    start_file = sub.Popen(['head', '-' + str(max_lines), gcode_file],stdout=sub.PIPE,stderr=sub.PIPE)
    output, errors = start_file.communicate()
    first_lines = output.splitlines()
    for line in first_lines:
        search = re.search('(?<=Layer count:)([+|-]*[0-9]*.[0-9]*)', line);
        if search != None:
            return int(search.group(1))
    return 0

#encoded="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"
#data = base64.b64decode(encoded)

#data = zlib.decompress(encoded, 9)

#rint data

#file="/var/www/upload/gcode/Zanca_Plateconnn_(slic3r).gcode"
file="/var/www/upload/gcode/Zanca_Plateconn_(cura).gcode"
engine =  who_generate_file(file, 10)


if(engine == 'CURA'):
    print "Total layers: ", cura_get_total_layers(file)



        
    