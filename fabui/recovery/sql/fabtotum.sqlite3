--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Table: sys_tasks
DROP TABLE IF EXISTS sys_tasks;
CREATE TABLE "sys_tasks" ( "id" INTEGER, "user" int(11) NOT NULL, "controller" varchar(255) NOT NULL, "type" varchar(255) DEFAULT NULL, "status" varchar(255) DEFAULT NULL, "attributes" text NOT NULL DEFAULT '{}', "start_date" datetime NOT NULL, "finish_date" datetime, "id_object" INTEGER, "id_file" INTEGER, PRIMARY KEY ("id" ASC));

-- Table: sys_files
DROP TABLE IF EXISTS sys_files;
CREATE TABLE sys_files (id INTEGER PRIMARY KEY AUTOINCREMENT, file_name varchar (255) NOT NULL, file_type varchar (255) DEFAULT NULL, file_path varchar (255) NOT NULL, full_path varchar (255) NOT NULL, raw_name varchar (255) DEFAULT NULL, orig_name varchar (255) DEFAULT NULL, client_name varchar (255) DEFAULT NULL, file_ext varchar (255) DEFAULT NULL, file_size int (11) DEFAULT NULL, print_type varchar (255) DEFAULT NULL, is_image int (1) DEFAULT NULL, image_width int (11) DEFAULT NULL, image_height int (11) DEFAULT NULL, image_type int (255) DEFAULT NULL, image_size_str varchar (255) DEFAULT NULL, insert_date datetime NOT NULL, update_date datetime DEFAULT NULL, note text DEFAULT '', tags text DEFAULT '', attributes text NOT NULL DEFAULT '{}');

-- Table: sys_themes
DROP TABLE IF EXISTS sys_themes;
CREATE TABLE `sys_themes` ( `id` INTEGER PRIMARY KEY, `location` text NOT NULL );

-- Table: sys_codes
DROP TABLE IF EXISTS sys_codes;
CREATE TABLE sys_codes (id INTEGER PRIMARY KEY AUTOINCREMENT, type varchar (5) NOT NULL, code int (10) NOT NULL, label varchar (255) NOT NULL, description text NOT NULL);
INSERT INTO sys_codes (id, type, code, label, description) VALUES (1, 'G', 0, 'G0', 'G1');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (2, 'G', 1, 'G1', 'Coordinated Movement X Y Z E');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (3, 'G', 2, 'G2', 'CW ARC');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (4, 'G', 3, 'G3', 'CCW ARC');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (5, 'G', 4, 'G4', 'Dwell S<seconds> or P<milliseconds>');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (6, 'G', 10, 'G10', 'retract filament according to settings of M207');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (7, 'G', 11, 'G11', 'retract recover filament according to settings of M208');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (8, 'G', 27, 'G27', 'Home Z axis max (no plane needed)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (9, 'G', 28, 'G28', 'Home all Axis');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (10, 'G', 29, 'G29', 'Detailed Z-Probe, probes the bed at 3 or more points.  Will fail if you haven''t homed yet.');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (11, 'G', 30, 'G30', 'Single Z Probe, probes bed at current XY location S<mm> searching Z length');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (12, 'G', 90, 'G90', 'Use Absolute Coordinates');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (13, 'G', 91, 'G91', 'Use Relative Coordinates');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (14, 'G', 92, 'G92', 'Set current position to coordinates given');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (15, 'M', 0, 'M0', 'Unconditional stop');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (16, 'M', 1, 'M1', 'Same as M0');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (17, 'M', 17, 'M17', 'Enable/Power all stepper motors');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (18, 'M', 18, 'M18', 'Disable all stepper motors; same as M84');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (19, 'M', 20, 'M20', 'List SD card');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (20, 'M', 21, 'M21', 'Init SD card');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (21, 'M', 22, 'M22', 'Release SD card');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (22, 'M', 23, 'M23', 'Select SD file (M23 filename.g)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (23, 'M', 24, 'M24', 'Start/resume SD print');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (24, 'M', 25, 'M25', 'Pause SD print');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (25, 'M', 26, 'M26', 'Set SD position in bytes (M26 S12345)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (26, 'M', 27, 'M27', 'Report SD print status');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (27, 'M', 28, 'M28', 'Start SD write (M28 filename.g)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (28, 'M', 29, 'M29', 'Stop SD write');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (29, 'M', 30, 'M30', 'Delete file from SD (M30 filename.g)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (30, 'M', 31, 'M31', 'Output time since last M109 or SD card start to serial');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (31, 'M', 32, 'M32', 'Select file and start SD print (Can be used _while_ printing from SD card files):  syntax ''M32 /path/filename#'', or ''M32 S<startpos bytes> !filename#'' Call gcode file : ''M32 P !filename#'' and return to caller file after finishing (similar to #include).The ''#'' is necessary when calling from within sd files, as it stops buffer prereading');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (32, 'M', 42, 'M42', 'Change pin status via gcode Use M42 Px Sy to set pin x to value y, when omitting Px the onboard led will be used.');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (33, 'M', 80, 'M80', 'Turn on Power Supply');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (34, 'M', 81, 'M81', 'Turn off Power Supply');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (35, 'M', 82, 'M82', 'Set E codes absolute (default)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (36, 'M', 83, 'M83', 'Set E codes relative while in Absolute Coordinates (G90) mode');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (37, 'M', 84, 'M84', 'Disable steppers until next move, or use S<seconds> to specify an inactivity timeout, after which the steppers will be disabled.  S0 to disable the timeout.');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (38, 'M', 85, 'M85', 'Set inactivity shutdown timer with parameter S<seconds>. To disable set zero (default)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (39, 'M', 92, 'M92', 'Set axis_steps_per_unit');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (40, 'M', 104, 'M104', 'Set extruder target temp');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (41, 'M', 105, 'M105', 'Read current temp');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (42, 'M', 106, 'M106', 'Fan on');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (43, 'M', 107, 'M107', 'Fan off');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (44, 'M', 109, 'M109', 'Sxxx Wait for extruder current temp to reach target temp. Waits only when heating. Rxxx Wait for extruder current temp to reach target temp. Waits when heating and cooling. IF AUTOTEMP is enabled, S<mintemp> B<maxtemp> F<factor>. Exit autotemp by any M109 without F');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (45, 'M', 114, 'M114', 'Output current position to serial port');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (46, 'M', 115, 'M115', 'Capabilities string');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (47, 'M', 117, 'M117', 'display message');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (48, 'M', 119, 'M119', 'Output Endstop status to serial port');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (49, 'M', 126, 'M126', 'Solenoid Air Valve Open (BariCUDA support by jmil)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (50, 'M', 127, 'M127', 'Solenoid Air Valve Closed (BariCUDA vent to atmospheric pressure by jmil)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (51, 'M', 128, 'M128', 'EtoP Open (BariCUDA EtoP = electricity to air pressure transducer by jmil)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (52, 'M', 129, 'M129', 'EtoP Closed (BariCUDA EtoP = electricity to air pressure transducer by jmil)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (53, 'M', 140, 'M140', 'Set bed target temp');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (54, 'M', 150, 'M150', 'Set BlinkM Color Output R: Red<0-255> U(!): Green<0-255> B: Blue<0-255> over i2c, G for green does not work.');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (55, 'M', 190, 'M190', 'Sxxx Wait for bed current temp to reach target temp. Waits only when heating. Rxxx Wait for bed current temp to reach target temp. Waits when heating and cooling');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (56, 'M', 200, 'M200 D<millimeters>', 'set filament diameter and set E axis units to cubic millimeters (use S0 to set back to millimeters).');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (57, 'M', 201, 'M201', 'Set max acceleration in units/s^2 for print moves (M201 X1000 Y1000)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (58, 'M', 202, 'M202', 'Set max acceleration in units/s^2 for travel moves (M202 X1000 Y1000) Unused in Marlin!!');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (59, 'M', 203, 'M203', 'Set maximum feedrate that your machine can sustain (M203 X200 Y200 Z300 E10000) in mm/sec');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (60, 'M', 204, 'M204', 'Set default acceleration: S normal moves T filament only moves (M204 S3000 T7000) in mm/sec^2  also sets minimum segment time in ms (B20000) to prevent buffer under-runs and M20 minimum feedrate');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (61, 'M', 205, 'M205', ' advanced settings:  minimum travel speed S=while printing T=travel only,  B=minimum segment time X= maximum xy jerk, Z=maximum Z jerk, E=maximum E jerk');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (62, 'M', 206, 'M206', 'set additional homing offset');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (63, 'M', 207, 'M207', 'set retract length S[positive mm] F[feedrate mm/min] Z[additional zlift/hop], stays in mm regardless of M200 setting');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (64, 'M', 208, 'M208', 'set recover=unretract length S[positive mm surplus to the M207 S*] F[feedrate mm/sec]');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (65, 'M', 209, 'M209', 'S<1=true/0=false> enable automatic retract detect if the slicer did not support G10/11: every normal extrude-only move will be classified as retract depending on the direction.');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (66, 'M', 218, 'M218', 'set hotend offset (in mm): T<extruder_number> X<offset_on_X> Y<offset_on_Y>');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (67, 'M', 220, 'M220 S<factor in percent>', 'set speed factor override percentage');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (68, 'M', 221, 'M221 S<factor in percent>', 'set extrude factor override percentage');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (69, 'M', 226, 'M226 P<pin number> S<pin state>', 'Wait until the specified pin reaches the state required');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (70, 'M', 240, 'M240', 'Trigger a camera to take a photograph');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (71, 'M', 250, 'M250', 'Set LCD contrast C<contrast value> (value 0..63)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (72, 'M', 280, 'M280', 'set servo position absolute. P: servo index, S: angle or microseconds');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (73, 'M', 300, 'M300', 'Play beep sound S<frequency Hz> P<duration ms>');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (74, 'M', 301, 'M301', 'Set PID parameters P I and D');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (75, 'M', 302, 'M302', 'Allow cold extrudes, or set the minimum extrude S<temperature>.');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (76, 'M', 303, 'M303', 'PID relay autotune S<temperature> sets the target temperature. (default target temperature = 150C)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (77, 'M', 304, 'M304', 'Set bed PID parameters P I and D');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (78, 'M', 400, 'M400', 'Finish all moves');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (79, 'M', 401, 'M401', 'Lower z-probe if present');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (80, 'M', 402, 'M402', 'Raise z-probe if present');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (81, 'M', 500, 'M500', 'stores parameters in EEPROM');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (82, 'M', 501, 'M501', 'reads parameters from EEPROM (if you need reset them after you changed them temporarily).');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (83, 'M', 502, 'M502', 'reverts to the default ''factory settings''.  You still need to store them in EEPROM afterwards if you want to.');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (84, 'M', 503, 'M503', 'print the current settings (from memory not from EEPROM)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (85, 'M', 540, 'M540', 'Use S[0|1] to enable or disable the stop SD card print on endstop hit (requires ABORT_ON_ENDSTOP_HIT_FEATURE_ENABLED)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (86, 'M', 600, 'M600', 'Pause for filament change X[pos] Y[pos] Z[relative lift] E[initial retract] L[later retract distance for removal]');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (87, 'M', 665, 'M665', 'set delta configurations');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (88, 'M', 666, 'M666', 'set delta endstop adjustment');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (89, 'M', 605, 'M605', 'Set dual x-carriage movement mode: S<mode> [ X<duplication x-offset> R<duplication temp offset> ]');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (90, 'M', 907, 'M907', 'Set digital trimpot motor current using axis codes.');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (91, 'M', 908, 'M908', 'Control digital trimpot directly.');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (92, 'M', 350, 'M350', 'Set microstepping mode.');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (93, 'M', 351, 'M351', 'Toggle MS1 MS2 pins directly.');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (94, 'M', 928, 'M928', 'Start SD logging (M928 filename.g)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (95, 'M', 999, 'M999', 'Restart after being stopped by error');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (96, 'M', 3, 'M3 S[RPM] SPINDLE ON', 'Clockwise , tries to mantain RPM costant min: 6500, max: 15000');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (97, 'M', 4, 'M4 S[RPM] SPINDLE ON', 'CounterClockwise, tries to mantain RPM costant min: 6500, max: 15000');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (98, 'M', 5, 'M5', 'SPINDLE OFF');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (99, 'M', 700, 'M700 S<0-255>', 'Laser Power Control');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (100, 'M', 701, 'M701 S<0-255>', 'Ambient Light, Set Red');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (101, 'M', 702, 'M702 S<0-255>', 'Ambient Light, Set Green');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (102, 'M', 703, 'M703 S<0-255>', 'Ambient Light, Set Blue');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (103, 'M', 704, 'M704', 'Signalling Light ON (same colors of Ambient Light)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (104, 'M', 705, 'M705', 'Signalling Light OFF');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (105, 'M', 706, 'M706 S <0-255>', 'Head Light');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (106, 'M', 710, 'M710 S<VAL>', 'write and store in eeprom calibrated z_probe offset length');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (107, 'M', 711, 'M711', 'write and store in eeprom calibrated zprobe extended angle');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (108, 'M', 712, 'M712', 'write and store in eeprom calibrated zprobe retacted angle');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (109, 'M', 713, 'M713', 'autocalibration of z-probe length and store in eeprom');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (110, 'M', 720, 'M720', '24VDC head power ON');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (111, 'M', 721, 'M721', '24VDC head power OFF');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (112, 'M', 722, 'M722', '5VDC SERVO_1 power ON');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (113, 'M', 723, 'M723', '5VDC SERVO_1 power OFF');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (114, 'M', 724, 'M724', '5VDC SERVO_2 power ON');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (115, 'M', 725, 'M725', '5VDC SERVO_2 power OFF');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (116, 'M', 726, 'M726', '5VDC RASPBERRY PI power ON');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (117, 'M', 727, 'M727', '5VDC RASPBERRY PI power OFF');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (118, 'M', 728, 'M728', 'RASPBERRY Alive/awake Command');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (119, 'M', 729, 'M729', 'RASPBERRY Sleep ');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (120, 'M', 730, 'M730', 'Read last error code');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (121, 'M', 731, 'M731', 'Disable kill on Door Open');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (122, 'M', 740, 'M740', 'read WIRE_END sensor');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (123, 'M', 741, 'M741', 'read DOOR_OPEN sensor');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (124, 'M', 742, 'M742', 'read REEL_LENS_OPEN sensor');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (125, 'M', 743, 'M743', 'read SECURE_SWITCH sensor');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (126, 'M', 744, 'M744', 'read HOT_BED placed in place');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (127, 'M', 745, 'M745', 'read Head placed in place');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (128, 'M', 750, 'M750', 'read PRESSURE sensor (ANALOG 0-1023)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (129, 'M', 751, 'M751', 'read voltage monitor 24VDC input supply (ANALOG V)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (130, 'M', 752, 'M752', 'read voltage monitor 5VDC input supply (ANALOG V)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (131, 'M', 753, 'M753', 'read current monitor input supply (ANALOG A)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (132, 'M', 754, 'M754', 'read tempearture raw values (10bit ADC output)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (133, 'M', 760, 'M760', 'read FABtotum Personal Fabricator Main Controller serial ID');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (134, 'M', 761, 'M761', 'read FABtotum Personal Fabricator Main Controller control code of serial ID');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (135, 'M', 762, 'M762', 'read FABtotum Personal Fabricator Main Controller board version number');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (136, 'M', 763, 'M763', 'read FABtotum Personal Fabricator Main Controller production batch number');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (137, 'M', 764, 'M764', 'read FABtotum Personal Fabricator Main Controller control code of production batch number');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (138, 'M', 765, 'M765', 'read FABtotum Personal Fabricator Firmware Version');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (139, 'M', 766, 'M766', 'read FABtotum Personal Fabricator Firmware Build Date and Time');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (140, 'M', 767, 'M767', 'read FABtotum Personal Fabricator Firmware Update Author');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (141, 'M', 780, 'M780', 'read Head Product Name');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (142, 'M', 781, 'M781', 'read Head Vendor Name');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (143, 'M', 782, 'M782', 'read Head product ID');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (144, 'M', 783, 'M783', 'read Head vendor ID');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (145, 'M', 784, 'M784', 'read Head Serial ID');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (146, 'M', 785, 'M785', 'read Head firmware version');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (147, 'M', 786, 'M786', 'read needed firmware version of FABtotum Personal Fabricator Main Controller');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (148, 'M', 787, 'M787', 'read Head capability: type0 (passive, active)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (149, 'M', 788, 'M788', 'read Head capability: type1 (additive, milling, syringe, laser etc..)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (150, 'M', 789, 'M789', 'read Head capability: purpose (single purpose, multipurpose)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (151, 'M', 790, 'M790', 'read Head capability: wattage (0-200W)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (152, 'M', 791, 'M791', 'read Head capability: axis (number of axis)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (153, 'M', 792, 'M792', 'read Head capability: servo (number of axis)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (154, 'M', 732, 'M732 S<FLAG>', 'Code for enable/disable the operations kill on door opening permanently (M732 S0->disable(unsafe),M732 S1->enable(safe)');
INSERT INTO sys_codes (id, type, code, label, description) VALUES (155, 'M', 714, 'M714 S<FLAG>', 'Select the homing X switch (max or min) to allow machine operation even with X min swicth fail (M714 S0->select X min switch, M714 S1->select X max switch)');

-- Table: sys_configuration
DROP TABLE IF EXISTS sys_configuration;
CREATE TABLE sys_configuration (id INTEGER PRIMARY KEY AUTOINCREMENT, "key" varchar (255) NOT NULL, value text DEFAULT '');
INSERT INTO sys_configuration (id, "key", value) VALUES (1, 'filemanager_accepted_files', '.txt,.pdf,.stl,.asc,.gc,.nc,.rec,.jpg');
INSERT INTO sys_configuration (id, "key", value) VALUES (2, 'languages', '{"english":{"code":"us","description":"English","name":"english"},"italian":{"code":"it","description":"Italiano","name":"italian"},"german":{"code":"de","description":"Deutsch","name":"german"}}');
INSERT INTO sys_configuration (id, "key", value) VALUES (3, 'fw_version', NULL);
INSERT INTO sys_configuration (id, "key", value) VALUES (4, 'fabui_version', '0.9');
INSERT INTO sys_configuration (id, "key", value) VALUES (5, 'network', '{"interfaces" : {}, "hostname" : "fabtotum", "description" : "Fabtotum Personal Fabricator 3D Printer" }');

-- Table: sys_objects
DROP TABLE IF EXISTS sys_objects;
CREATE TABLE sys_objects (id INTEGER PRIMARY KEY AUTOINCREMENT, user int (11) NOT NULL, name varchar (255) DEFAULT NULL, description text, date_insert datetime DEFAULT NULL, date_update datetime DEFAULT NULL, public int (1) NOT NULL DEFAULT '1', tags text DEFAULT '');
-- Table: sys_plugins
DROP TABLE IF EXISTS sys_plugins;
CREATE TABLE sys_plugins (id INTEGER PRIMARY KEY AUTOINCREMENT, name text NOT NULL, attributes text NOT NULL);

-- Table: sys_user
DROP TABLE IF EXISTS sys_user;
CREATE TABLE sys_user (id INTEGER PRIMARY KEY AUTOINCREMENT, email varchar (255) DEFAULT NULL, password varchar (255) DEFAULT NULL, first_name varchar (255) NOT NULL, last_name varchar (255) NOT NULL, last_login datetime DEFAULT '1970-01-01 00:00:00', session_id varchar (255), settings text NOT NULL);

-- Table: sys_obj_files
DROP TABLE IF EXISTS sys_obj_files;
CREATE TABLE sys_obj_files (id INTEGER PRIMARY KEY AUTOINCREMENT, id_obj int (11) DEFAULT NULL, id_file int (11) DEFAULT NULL);

COMMIT TRANSACTION;
PRAGMA foreign_keys = on;
