#!/bin/sh
################################################################
# Begin $rc_base/init.d/
#
# Description :
#
# Authors     :
#
# Version     : 00.01
#
# Notes       :
#
###############################################################

. /etc/default/rc
. ${rc_functions}

test -r /etc/default/fabui && source /etc/default/fabui

[ -z "$BTAGENT_STARTUP" ] && BTAGENT_STARTUP="yes"
[ -z "$GPIOMONITOR_STARTUP" ] && GPIOMONITOR_STARTUP="yes"
[ -z "$XMLRPCS_STARTUP" ] && XMLRPCS_STARTUP="yes"
[ -z "$FABSERVICE_STARTUP" ] && FABSERVICE_STARTUP="yes"
[ -z "$MONITOR_STARTUP" ] && MONITOR_STARTUP="no"

SERVICE_NAME=FABUI
FORCED="$2"
CPUID=$(cat /proc/cpuinfo | grep Hardware | awk '{print $3}')

case "$1" in
  start)
    mkdir -p ${TEMP_PATH}/fabui
    chown 33:33 ${TEMP_PATH}/fabui
    chown 33:33 ${BIGTEMP_PATH}

    mkdir -p ${BIGTEMP_PATH}/fabui
    chown 33:33 ${BIGTEMP_PATH}/fabui
    chown 33:33 ${BIGTEMP_PATH}

	#mkdir -p ${TEMP_PATH}/lighttpd/compress
	#chown 33:33 ${TEMP_PATH}/lighttpd/compress

	### fix file permissions
	chown -R 33:33 /mnt/userdata/*
	chown -R 33:33 /mnt/bigtemp/fabui/*
	#~ chown -R 33:33 /var/lib/fabui/*
	chown 33:33 /var/lib/fabui/serial.ini
	chown 33:33 /var/lib/fabui/camera.ini
	chown 33:33 /var/lib/fabui/fabtotum.db
	chown 33:33 /var/lib/fabui/heads
	chown 33:33 /var/lib/fabui/plugins
	chown 33:33 /var/lib/fabui/feeders
	chown -R 33:33 /var/lib/fabui/settings

    boot_msg "Starting ${SERVICE_NAME}."

    # (obsolete)
    #python ${PYTHON_PATH}/setBaud.py &> /var/log/fabui/setBaud.log

    ######## fabtotum server ########
    #start-stop-daemon -b -S -q -m -p ${FABSERVICE_PID} --exec python ${PYTHON_PATH}/FabtotumServices.py -- -B -L /var/log/fabui/FabtotumServices.log
    ARGS="-B -p ${FABSERVICE_PID} -x ${XMLRPCS_PID}"
    if [ x"$FORCED" != x"" ]; then
        ARGS="-R ${ARGS}"
    fi
    if [ x"$BTAGENT_STARTUP" != x"yes" ]; then
        ARGS="${ARGS} --no-btagent"
    fi
    if [ x"$GPIOMONITOR_STARTUP" != x"yes" ]; then
        ARGS="${ARGS} --no-gpiomonitor"
    fi
    if [ x"$XMLRPCS_STARTUP" != x"yes" ]; then
        ARGS="${ARGS} --no-xmlrpc"
    fi
	
	if [ x"$MONITOR_STARTUP" != x"yes" ]; then
        ARGS="${ARGS} --no-monitor"
    fi

    if [ x"$FABSERVICE_STARTUP" == x"yes" ]; then
        python ${PYTHON_PATH}/FabtotumServices.py ${ARGS} &> /var/log/fabui/FabtotumServices.log 2>&1 &
    fi

    evaluate_retval
    ;;
  stop)
    boot_msg "Stopping ${SERVICE_NAME}."

    start-stop-daemon -K -q -o -p ${FABSERVICE_PID}
    start-stop-daemon -K -q -o -p ${GPIOMONITOR_PID}
    [ x"$CPUID" == x"BCM2709" ] && start-stop-daemon -K -q -o -p ${XMLRPCS_PID}
    [ x"$BTAGENT_STARTUP" = x"yes" ] && start-stop-daemon -K -q -o -p ${BTAGENT_PID}

    evaluate_retval

    ;;
  emergency)
    # Forcefully stop python scripts
    killall -9 python
    rm -f ${FABSERVICE_PID}
    rm -f ${XMLRPCS_PID}
    rm -f ${GPIOMONITOR_PID}
    rm -f ${BTAGENT_PID}

    # Configure RESET pin to output
    PIN=17
    STATE=out

    echo "$PIN" > /sys/class/gpio/export
    GPIO_DIR="gpio$PIN"
    echo "$STATE" > /sys/class/gpio/$GPIO_DIR/direction

    # Reset totumduino
    echo 0 > /sys/class/gpio/$GPIO_DIR/value

    # Start the services with totumduino hw reset
    ${0} start "forced"
    ;;
  restart|reload)
    ${0} stop
    sleep 1
    ${0} start
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|reload|emergency}"
    exit 1
esac

exit $?
